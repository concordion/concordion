plugins {
    id 'java-library'

    // Publishing
    id 'maven-publish'
    id 'java-library-distribution'
    id 'signing'
    id 'net.nemerosa.versioning' version '2.14.0'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    id 'net.researchgate.release' version '2.8.1'
    id 'org.ajoberstar.git-publish' version '3.0.1'
}

description = 'Concordion is an open source framework for Java that lets you turn a plain English description of a requirement into an automated test'
group = 'org.concordion'

repositories {
    mavenCentral()
}

ext {
    junitJupiterVersion = '5.8.2'
    flexmarkVersion = '0.62.2'
    githubUrl = "https://github.com/concordion/${project.name}"
    issuesUrl = "${githubUrl}/issues"
    vcsUrl =  "${githubUrl}.git"
    vcsConnection = "scm:git:git://github.com/concordion/${project.name}.git"

    if (!project.hasProperty("sonatypeUsername")) {
        sonatypeUsername = ''
    }
    if (!project.hasProperty("sonatypePassword")) {
        sonatypePassword = ''
    }
}

dependencies {
    api (platform("org.junit:junit-bom:$junitJupiterVersion"))
    api 'org.junit.jupiter:junit-jupiter'
    api 'junit:junit:4.13.2'
    testRuntimeOnly('org.junit.vintage:junit-vintage-engine') {
        because 'allows JUnit 4 tests to run'
    }
    api('org.junit.platform:junit-platform-engine') {
        because 'allows creation of custom Concordion TestEngine'        
    }
    api('org.junit.platform:junit-platform-launcher') {
        because 'allows run-command to use JUnit Platform'
    }
    testImplementation('org.junit.platform:junit-platform-testkit') {
        because 'allows testing of Concordion TestEngine'
    }

    api "com.vladsch.flexmark:flexmark:$flexmarkVersion",
            "com.vladsch.flexmark:flexmark-ext-gfm-strikethrough:$flexmarkVersion",
            "com.vladsch.flexmark:flexmark-ext-tables:$flexmarkVersion"

    implementation 'ognl:ognl:3.1.29',
            "com.vladsch.flexmark:flexmark-profile-pegdown:$flexmarkVersion"

    api ('xom:xom:1.3.7') {
        exclude group: 'xalan', module: 'xalan'
        exclude group: 'xerces', module: 'xercesImpl'
        exclude group: 'xml-apis', module: 'xml-apis'
    }
    
    testImplementation ('org.concordion:concordion-embed-extension:1.2.0') {
        exclude group: 'org.concordion', module: 'concordion'
    }

    testImplementation 'com.github.stefanbirkner:system-rules:1.16.0',
                "com.vladsch.flexmark:flexmark-ext-abbreviation:$flexmarkVersion"
}

sourceSets {
    testDummies {  // "crash test dummies" - specs+fixtures that are used by the tests but aren't run as tests themselves
        java {
            srcDir 'src/test-dummies/java'
        }
        resources {
            srcDir 'src/test-dummies/resources'
        }
        compileClasspath = sourceSets.main.output + configurations.compileClasspath
    }

    test {
        compileClasspath += sourceSets.testDummies.output
        runtimeClasspath += sourceSets.testDummies.output
    }
}

sourceCompatibility = 8
targetCompatibility = 8

test {
    systemProperties['concordion.output.dir'] = "${reporting.baseDir}"
    useJUnitPlatform()
}

compileTestJava.dependsOn compileTestDummiesJava

// Publishing
task testJar(type: Jar, dependsOn: testClasses) {
    from sourceSets.test.output
    include 'test/**'
    archiveClassifier = "tests"
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact(testJar)

            pom {
                name = project.name
                description = project.description
                url = 'http://www.concordion.org'
                packaging = 'jar'
                inceptionYear = '2008'

                scm {
                    url = vcsUrl
                    connection = vcsConnection
                    developerConnection = vcsConnection
                }

                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.html'
                        distribution = 'repo'
                    }
                }

                issueManagement {
                    system = 'GitHub Issues'
                    url = issuesUrl
                }

                developers {
                    developer {
                        id = 'peterson3'
                        name = 'David Peterson'
                        roles = ['Project Creator']
                    }
                    developer {
                        id = 'nigel.charman.nz'
                        name = 'Nigel Charman'
                        roles = ['Project Lead']
                    }
                    developer {
                        id = 'drtimwright'
                        name = 'Tim Wright'
                        roles = ['Developer']
                    }
                    developer {
                        id = 'jose.m.beas'
                        name = 'Jose M Beas'
                        roles = ['Developer']
                    }
                    developer {
                        id = 'gmandnepr'
                        name = 'Ievgen Degtiarenko'
                        roles = ['Developer']
                    }
                    developer {
                        id = 'habuma'
                        roles = ['Developer']
                    }
                    developer {
                        id = 'pinfieldharm'
                        roles = ['Developer']
                    }
                    developer {
                        id = 'wangyizhuo'
                        roles = ['Developer']
                    }
                    developer {
                        id = 'lorenzodee'
                        name = 'Lorenzo Dee'
                        roles = ['Developer']
                    }
                }
            }
            versionMapping {
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }
}

distributions {
    main {
        contents {
            from ('.') { include '*.txt','build.gradle','src/**' }
            into ('lib') {
                from 'licenses'
            }
        }
    }
}

jar {
    manifest {
        attributes  'Specification-Title'   : project.name,
                'Implementation-Title'  : project.name,
                'Specification-Version' : project.version.substring(0, project.version.lastIndexOf(".")),
                'Implementation-Version': project.version,
                'Implementation-Vendor' : 'concordion.org',
                'Specification-Vendor'  : 'concordion.org',
                'Created-By'            : System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')',
                'Built-With'            : "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}",
                'Build-Time'            : String.format("%tFT%<tRZ", Calendar.getInstance(TimeZone.getTimeZone("Z"))),
                'Build-Revision'        : versioning.info.commit,
                'Build-OS'              : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
    }
}

nexusPublishing {
    repositories {
        sonatype {
            username = sonatypeUsername
            password = sonatypePassword
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

gitPublish {
    repoUri = 'git@github.com:concordion/concordion.git'
    branch = 'gh-pages'
    contents {
        from 'ghpages'

        into ('latest') {
            from ('build/reports/spec/concordion') {
                into 'spec'
            }

            from ('build/docs/javadoc/') {
                into 'javadoc'
            }
        }
    }
}

gitPublishCopy.dependsOn test
gitPublishCopy.dependsOn javadoc
